---
kind: Template
apiVersion: v1
metadata:
  name: dacs
  creationTimestamp: null
  annotations:
    openshift.io/display-name: DACS
    description: Trabalho de DACS em kubernetes
    iconClass: icon-php
    tags: php,nginx,database,postgresql
    template.openshift.io/long-description: Este template de serviços do trabalho de DACS.
    template.openshift.io/provider-display-name: Eduardo Klosowski
    template.openshift.io/documentation-url: https://github.com/eduardo-univille/trabalho-dacs
message: O serviço ${SERVICE_NAME} foi criado.
labels:
  template: dacs-template
objects:
  - kind: Secret
    apiVersion: v1
    metadata:
      name: ${SERVICE_NAME}-pg
    stringData:
      database-user: ${POSTGRESQL_USER}
      database-password: ${POSTGRESQL_PASSWORD}
  - kind: Route
    apiVersion: v1
    metadata:
      name: ${SERVICE_NAME}
    spec:
      host: ${APPLICATION_DOMAIN}
      to:
        kind: Service
        name: ${SERVICE_NAME}-web
  - kind: Service
    apiVersion: v1
    metadata:
      name: ${SERVICE_NAME}-web
      creationTimestamp: null
      annotations:
        service.alpha.openshift.io/dependencies: '[{"name": "${SERVICE_NAME}-php", "namespace": "", "kind": "Service"}, {"name": "${SERVICE_NAME}-pg", "namespace": "", "kind": "Service"}]'
    spec:
      ports:
        - name: web
          protocol: TCP
          port: 8080
          targetPort: 8080
          nodePort: 0
      selector:
        name: ${SERVICE_NAME}-web
        deploymentconfig: ${SERVICE_NAME}-web
      type: ClusterIP
      sessionAffinity: None
    status:
      loadBalancer: {}
  - kind: ImageStream
    apiVersion: v1
    metadata:
      name: ${SERVICE_NAME}-web
  - kind: BuildConfig
    apiVersion: v1
    metadata:
      name: ${SERVICE_NAME}-web
      creationTimestamp: null
    spec:
      nodeSelector: null
      runPolicy: Serial
      source:
        type: Git
        git:
          uri: ${GIT_URL}
          ref: ${GIT_REF}
      strategy:
        type: Docker
        dockerStrategy:
          dockerfilePath: Dockerfile-web
          from:
            kind: DockerImage
            name: nginx:alpine
      output:
        to:
          kind: ImageStreamTag
          name: ${SERVICE_NAME}-web:latest
      triggers:
        - type: ImageChange
        - type: ConfigChange
        - type: Generic
          generic:
            secret: ${WEBHOOK_SECRET}
        - type: GitHub
          github:
            secret: ${WEBHOOK_SECRET}
      postCommit: {}
  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: ${SERVICE_NAME}-web
      creationTimestamp: null
    spec:
      strategy:
        type: Rolling
      triggers:
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - ${SERVICE_NAME}-web
            from:
              kind: ImageStreamTag
              name: ${SERVICE_NAME}-web:latest
        - type: ConfigChange
      replicas: 1
      selector:
        name: ${SERVICE_NAME}-web
        deploymentconfig: ${SERVICE_NAME}-web
      template:
        metadata:
          creationTimestamp: null
          labels:
            name: ${SERVICE_NAME}-web
            deploymentconfig: ${SERVICE_NAME}-web
        spec:
          containers:
            - name: ${SERVICE_NAME}-web
              image: ' '
              ports:
                - containerPort: 8080
                  protocol: TCP
              readinessProbe:
                timeoutSeconds: 1
                initialDelaySeconds: 5
                tcpSocket:
                  port: 8080
              livenessProbe:
                timeoutSeconds: 1
                initialDelaySeconds: 5
                tcpSocket:
                  port: 8080
              env:
                - name: SERVICE_NAME
                  value: ${SERVICE_NAME}
              terminationMessagePath: /dev/termination-log
              imagePullPolicy: Always
              securityContext:
                capabilities: {}
                privileged: false
          restartPolicy: Always
          dnsPolicy: ClusterFirst
    status:
  - kind: Service
    apiVersion: v1
    metadata:
      name: ${SERVICE_NAME}-php
      creationTimestamp: null
    spec:
      ports:
        - name: php-fpm
          protocol: TCP
          port: 9000
          targetPort: 9000
          nodePort: 0
      selector:
        name: ${SERVICE_NAME}-php
        deploymentconfig: ${SERVICE_NAME}-php
      type: ClusterIP
      sessionAffinity: None
    status:
      loadBalancer: {}
  - kind: ImageStream
    apiVersion: v1
    metadata:
      name: ${SERVICE_NAME}-php
  - kind: BuildConfig
    apiVersion: v1
    metadata:
      name: ${SERVICE_NAME}-php
      creationTimestamp: null
    spec:
      nodeSelector: null
      runPolicy: Serial
      source:
        type: Git
        git:
          uri: ${GIT_URL}
          ref: ${GIT_REF}
      strategy:
        type: Docker
        dockerStrategy:
          from:
            kind: DockerImage
            name: php:fpm-alpine
      output:
        to:
          kind: ImageStreamTag
          name: ${SERVICE_NAME}-php:latest
      triggers:
        - type: ImageChange
        - type: ConfigChange
        - type: Generic
          generic:
            secret: ${WEBHOOK_SECRET}
        - type: GitHub
          github:
            secret: ${WEBHOOK_SECRET}
      postCommit: {}
  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: ${SERVICE_NAME}-php
      creationTimestamp: null
    spec:
      strategy:
        type: Rolling
      triggers:
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - ${SERVICE_NAME}-php
            from:
              kind: ImageStreamTag
              name: ${SERVICE_NAME}-php:latest
        - type: ConfigChange
      replicas: 1
      selector:
        name: ${SERVICE_NAME}-php
        deploymentconfig: ${SERVICE_NAME}-php
      template:
        metadata:
          creationTimestamp: null
          labels:
            name: ${SERVICE_NAME}-php
            deploymentconfig: ${SERVICE_NAME}-php
        spec:
          containers:
            - name: ${SERVICE_NAME}-php
              image: ' '
              ports:
                - containerPort: 9000
                  protocol: TCP
              readinessProbe:
                timeoutSeconds: 1
                initialDelaySeconds: 5
                tcpSocket:
                  port: 9000
              livenessProbe:
                timeoutSeconds: 1
                initialDelaySeconds: 5
                tcpSocket:
                  port: 9000
              env:
                - name: POSTGRESQL_USER
                  valueFrom:
                    secretKeyRef:
                      name: ${SERVICE_NAME}-pg
                      key: database-user
                - name: POSTGRESQL_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: ${SERVICE_NAME}-pg
                      key: database-password
                - name: POSTGRESQL_DATABASE
                  value: ${POSTGRESQL_DATABASE}
                - name: POSTGRESQL_HOST
                  value: ${SERVICE_NAME}-pg
              terminationMessagePath: /dev/termination-log
              imagePullPolicy: Always
              securityContext:
                capabilities: {}
                privileged: false
          restartPolicy: Always
          dnsPolicy: ClusterFirst
    status:
  - kind: Service
    apiVersion: v1
    metadata:
      name: ${SERVICE_NAME}-pg
      creationTimestamp: null
    spec:
      ports:
        - name: postgresql
          protocol: TCP
          port: 5432
          targetPort: 5432
          nodePort: 0
      selector:
        name: ${SERVICE_NAME}-pg
      type: ClusterIP
      sessionAffinity: None
    status:
      loadBalancer: {}
  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: ${SERVICE_NAME}-pg
      creationTimestamp: null
    spec:
      strategy:
        type: Recreate
      triggers:
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - postgresql
            from:
              kind: ImageStreamTag
              name: postgresql:9.5
              namespace: openshift
        - type: ConfigChange
      replicas: 1
      selector:
        name: ${SERVICE_NAME}-pg
      template:
        metadata:
          creationTimestamp: null
          labels:
            name: ${SERVICE_NAME}-pg
        spec:
          containers:
            - name: postgresql
              image: ' '
              ports:
                - containerPort: 5432
                  protocol: TCP
              readinessProbe:
                timeoutSeconds: 1
                initialDelaySeconds: 5
                exec:
                  command: ['/bin/sh', '-i', '-c', 'psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c "SELECT 1"']
              livenessProbe:
                timeoutSeconds: 1
                initialDelaySeconds: 30
                tcpSocket:
                  port: 5432
              env:
                - name: POSTGRESQL_USER
                  valueFrom:
                    secretKeyRef:
                      name: ${SERVICE_NAME}-pg
                      key: database-user
                - name: POSTGRESQL_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: ${SERVICE_NAME}-pg
                      key: database-password
                - name: POSTGRESQL_DATABASE
                  value: ${POSTGRESQL_DATABASE}
              volumeMounts:
                - name: ${SERVICE_NAME}-data
                  mountPath: /var/lib/pgsql/data
              terminationMessagePath: /dev/termination-log
              imagePullPolicy: IfNotPresent
              securityContext:
                capabilities: {}
                privileged: false
          volumes:
            - name: ${SERVICE_NAME}-data
              emptyDir:
                medium: ''
          restartPolicy: Always
          dnsPolicy: ClusterFirst
    status:
parameters:
  - name: SERVICE_NAME
    displayName: Nome do Serviço
    description: Nome do serviço OpenShift.
    value: 'dacs'
    required: true
  - name: APPLICATION_DOMAIN
    displayName: Hostname
    description: Hostname da aplicação, deixe em branco para usar o padrão.
    value: ''
  - name: GIT_URL
    displayName: Repositório git
    description: URL do repositório git.
    value: 'https://github.com/eduardo-univille/trabalho-dacs.git'
    required: true
  - name: GIT_REF
    displayName: Referência do git
    description: Referência do repositório git para construir a aplicação.
    value: 'master'
    required: true
  - name: WEBHOOK_SECRET
    displayName: Senha do Webhook do GitHub
    description: Uma senha usada para configurar o Webhook do GitHub.
    generate: expression
    from: '[a-zA-Z0-9]{40}'
    required: true
  - name: POSTGRESQL_USER
    displayName: Usuário do PostgreSQL
    description: Usuário do PostgreSQL para acessar o banco de dados.
    generate: expression
    from: 'user[A-Z0-9]{3}'
    required: true
  - name: POSTGRESQL_PASSWORD
    displayName: Senha do PostgreSQL
    description: Senha do usuário do PostgreSQL para acessar o banco de dados.
    generate: expression
    from: '[a-zA-Z0-9]{16}'
    required: true
  - name: POSTGRESQL_DATABASE
    displayName: Nome do banco
    description: Nome do banco de dados do PostgreSQL.
    value: dacs
    required: true
